// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package worddb

import (
	"context"
	"database/sql"
)

const addWordCount = `-- name: AddWordCount :exec
UPDATE word
set added_count=added_count+1
WHERE word = ?
`

func (q *Queries) AddWordCount(ctx context.Context, word string) error {
	_, err := q.db.ExecContext(ctx, addWordCount, word)
	return err
}

const countWord = `-- name: CountWord :one
SELECT COUNT(*) FROM word WHERE word = ?
`

func (q *Queries) CountWord(ctx context.Context, word string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countWord, word)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createWord = `-- name: CreateWord :one
INSERT INTO word (
  word, zh_trans, added_count, lookup_count
) VALUES (
  ?, ?, 0, 0
)
RETURNING word, zh_trans, added_count, lookup_count
`

type CreateWordParams struct {
	Word    string
	ZhTrans sql.NullString
}

func (q *Queries) CreateWord(ctx context.Context, arg CreateWordParams) (Word, error) {
	row := q.db.QueryRowContext(ctx, createWord, arg.Word, arg.ZhTrans)
	var i Word
	err := row.Scan(
		&i.Word,
		&i.ZhTrans,
		&i.AddedCount,
		&i.LookupCount,
	)
	return i, err
}

const deleteWord = `-- name: DeleteWord :exec
DELETE FROM word
WHERE word = ?
`

func (q *Queries) DeleteWord(ctx context.Context, word string) error {
	_, err := q.db.ExecContext(ctx, deleteWord, word)
	return err
}

const getWord = `-- name: GetWord :one
SELECT word, zh_trans, added_count, lookup_count FROM word
WHERE word = ? LIMIT 1
`

func (q *Queries) GetWord(ctx context.Context, word string) (Word, error) {
	row := q.db.QueryRowContext(ctx, getWord, word)
	var i Word
	err := row.Scan(
		&i.Word,
		&i.ZhTrans,
		&i.AddedCount,
		&i.LookupCount,
	)
	return i, err
}

const listword = `-- name: Listword :many
SELECT word, zh_trans, added_count, lookup_count FROM word
`

func (q *Queries) Listword(ctx context.Context) ([]Word, error) {
	rows, err := q.db.QueryContext(ctx, listword)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Word
	for rows.Next() {
		var i Word
		if err := rows.Scan(
			&i.Word,
			&i.ZhTrans,
			&i.AddedCount,
			&i.LookupCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
